buildscript {
    ext {
        kotlin_version = '1.3.40'
        gradle_version = '3.5.0'
    }

    repositories {
        google()
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${gradle_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'gradle.plugin.org.mozilla.rust-android-gradle:plugin:0.8.1'
        classpath 'com.apollographql.apollo:apollo-gradle-plugin:1.1.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.apollographql.android'
apply plugin: 'kotlin-android'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.sunrisechoir'

android {
    compileSdkVersion 27
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

}

cargo {
    apiLevel = 21
    profile = 'release'
    module = '../rust'
    libname = 'patchql'
    //targets = ['arm', 'arm64', 'x86', 'x86_64']
    targets = ['arm64', 'x86']
}

//apollo {
//    generateKotlinModels = true
//}

repositories {
    google()
//    maven {
//        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
//        url "$rootDir/../node_modules/react-native/android"
//    }
    jcenter()
    mavenCentral()
}

dependencies {
//    implementation 'com.facebook.react:react-native:0.59.10'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.apollographql.apollo:apollo-runtime:1.1.3'
    implementation 'com.beust:klaxon:5.0.1'
    implementation 'com.beust:klaxon-jackson:1.0.1'
    compileOnly 'org.jetbrains:annotations:13.0'
    testCompileOnly 'org.jetbrains:annotations:13.0'
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["generate${productFlavor}${buildType}Assets"].dependsOn(tasks["cargoBuild"])
    }
}

